lines(u2o*100~d2o,lwd=2,lty=2,col="grey")
lines(l2o*100~d2o,lwd=2,lty=2,col="grey")
lines(u3o*100~d2o,lwd=2,lty=1,col="grey")
lines(l3o*100~d2o,lwd=2,lty=1,col="grey")
par(font=2)
oe2<-rep("",length(d6o))
for (i in 1:length(oe2)){if (d6o[i]*100>u2o[i]*100){oe2[i]<-as.character(dao[i])}}
text(d6o*100~d2o,labels=oe2,pos=3,offset=.3,cex=.8,lwd=3,col="black")
oe3<-rep("",length(d6o))
for (i in 1:length(oe3)){if (d6o[i]*100<l2o[i]*100){oe3[i]<-as.character(dao[i])}}
text(d6o*100~d2o,labels=oe3,pos=3,offset=.3,cex=.8,lwd=3,col="black")
par(font=1)
mtext("Total number of patients",side=1,line=2)
#Bayesian estimates, shrunken, adjusted predictors
collapsed <- read.csv("D:/TOSHIBA EXT/Statistics/MA of Biostats/WPP/poisson_wpp2.csv",
header = TRUE,
stringsAsFactors= TRUE,
strip.white = TRUE,
na.strings=c("","NA"))
n <- length(collapsed[,1])
names(collapsed)[c(2, 4)] <- c("observe","expect")
#Install (if not previously installed) and load necessary packages
for (package in c('R2jags', 'ggplot2', 'ggmcmc', 'dplyr', 'chron')) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
#Funnel plot
d1<-collapsed[,2]
d2<-collapsed[,3]
d3<-collapsed[,4]
da<-collapsed[,1]
d4<-sum(d3)/sum(d2)
d6<-d4*d1/d3
d7<-sum(d6*d2)/sum(d2)
d7<-rep(d7,length(da))
p<-d7
n<-d2
#calculates lower control limits
l2<-0;l3<-0
for (I in 1:2){
if (I==1){Z<-.02275}
if (I==2){Z<-.00135}
L0<-0
for (i in 1:length(n)){
P<-p[i];N<-n[i]
X<-0
if (1-pbeta(P,X+1,N-X)>=Z){X<-0}else{
X<-P*N
A<-1
bl<-F
while (bl==F){
X<-X-A
K<-1-pbeta(P,X+1,N-X)
if (K<=Z){bl<-T}
}
A<-.001
bl<-F
while (bl==F){
X<-X+A
K<-1-pbeta(P,X+1,N-X)
if (K>=Z){bl<-T}
}
}
L0[i]<-X/n[i]
}
if (I==1){l2<-L0}
if (I==2){l3<-L0}
}
#calculates upper control limits
u2<-0;u3<-0
for (I in 1:2){
if (I==1){Z<-.02275}
if (I==2){Z<-.00135}
U0<-0
for (i in 1:length(n)){
P<-p[i];N<-n[i]
X<-N
if (pbeta(P,X,N-X+1)>=Z){X<-N}else{
X<-N*P
A<-1
bl<-F
while (bl==F){
X<-X+A
K<-pbeta(P,X,N-X+1)
if (K<Z){bl<-T}
}
A<-.001
bl<-F
while (bl==F){
X<-X-A
K<-pbeta(P,X,N-X+1)
if (K>=Z){bl<-T}
}
}
U0[i]<-X/n[i]
}
if (I==1){u2<-U0;u2[u2==0]<-1}
if (I==2){u3<-U0;u3[u3==0]<-1}
}
o<-order(d2)
u2o<-u2[o];l2o<-l2[o];d6o<-d6[o];dao<-da[o];d2o<-d2[o];d7o<-d7[o];d3o<-d3[o]; d1o<-d1[o]
u3o<-u3[o];l3o<-l3[o]
l2o[l2o<0]<-0
l3o[l3o<0]<-0
lda<-1:length(dao)
eh<-"BCCA hospitals URTT RAR"
eh<-paste(eh," funnel plot",sep="")
ej<-"Risk-adjusted Rate (%)"
eq<-paste("2 & 3 SD control limits in dashed & solid grey lines respectively.")
par(xaxs="r")
plot(d6o*100~d2o,type="p",lwd=2,col="black",ylim=c(min(c(l3o*100,d6o*100)),max(c(20,d6o*100))),xlab=eq,ylab=ej)
abline(h=d7o*100,lwd=2,col="red")
lines(u2o*100~d2o,lwd=2,lty=2,col="grey")
lines(l2o*100~d2o,lwd=2,lty=2,col="grey")
lines(u3o*100~d2o,lwd=2,lty=1,col="grey")
lines(l3o*100~d2o,lwd=2,lty=1,col="grey")
par(font=2)
oe2<-rep("",length(d6o))
for (i in 1:length(oe2)){if (d6o[i]*100>u2o[i]*100){oe2[i]<-as.character(dao[i])}}
text(d6o*100~d2o,labels=oe2,pos=3,offset=.3,cex=.8,lwd=3,col="black")
oe3<-rep("",length(d6o))
for (i in 1:length(oe3)){if (d6o[i]*100<l2o[i]*100){oe3[i]<-as.character(dao[i])}}
text(d6o*100~d2o,labels=oe3,pos=3,offset=.3,cex=.8,lwd=3,col="black")
par(font=1)
mtext("Total number of patients",side=1,line=2)
install.packages("rms")
#Install (if not previously installed) and load necessary packages
for (package in c('R2jags', 'ggplot2', 'ggmcmc', 'dplyr', 'chron')) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
#Install (if not previously installed) and load necessary packages
for (package in c('R2jags', 'ggplot2', 'ggmcmc', 'dplyr', 'chron')) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
#Bayesian estimates, shrunken, adjusted predictors
collapsed <- read.csv("D:/TOSHIBA EXT/Statistics/MA of Biostats/WPP/poisson_wpp2.csv",
header = TRUE,
stringsAsFactors= TRUE,
strip.white = TRUE,
na.strings=c("","NA"))
n <- length(collapsed[,1])
names(collapsed)[c(2, 4)] <- c("observe","expect")
set.seed(1291)
cat(" model
{
for (i in 1:70) {
observe[i]~dpois(lambda[i])
lambda[i] <- theta[i]*expect[i]
smr[i] <- observe[i]/expect[i]
theta[i] ~ dgamma(alpha, beta)
b[i] <- beta/(beta + expect[i])
predict[i] ~ dpois(lambda[i])
rate[i] <- theta[i]*5.2
}
alpha ~ dexp(0.1)
beta  ~ dgamma(.1,.1)
mtheta <- alpha/beta
vartheta <- alpha/pow(beta,2)
sdtheta <- sqrt(vartheta)
}",
file="mobs.jag" )
#Data
a.dat <- as.list(collapsed[,c("observe","expect")])
#Initial values
inits1 <- list("alpha" = 5, "beta" = 7, "theta" = runif(70, min = 0.001, max = 0.99))
inits2 <- list("alpha" = 3, "beta" = 4, "theta" = runif(70, min = 0.001, max = 0.99))
inits3 <- list("alpha" = 1, "beta" = 1, "theta" = runif(70, min = 0.001, max = 0.99))
bayes.mod.inits <- list(inits1, inits2, inits3)
# Names of the parameters to monitor
a.par <- c("rate", "b")
# Model compilation and burn-in
a.mod <- jags.model( file = "mobs.jag",
data = a.dat,
n.chains = 3,
inits = bayes.mod.inits,
n.adapt = 1000)
# Sampling from the posterior
a.mobs <- coda.samples( model = a.mod,
var = a.par,
n.iter = 120000,
thin = 1 )
##Special function##
#Turns lists into dataframes easily
as.data.frame.list <- function(x, row.names=NULL, optional=FALSE, ...) {
if(!all(unlist(lapply(x, class)) %in%
c('raw','character','complex','numeric','integer','logical'))) {
warning('All elements of the list must be a vector.')
NextMethod(x, row.names=row.names, optional=optional, ...)
}
allequal <- all(unlist(lapply(x, length)) == length(x[[1]]))
havenames <- all(unlist(lapply(x, FUN=function(x) !is.null(names(x)))))
if(havenames) { #All the vectors in the list have names we can use
colnames <- unique(unlist(lapply(x, names)))
df <- data.frame(matrix(
unlist(lapply(x, FUN=function(x) { x[colnames] })),
nrow=length(x), byrow=TRUE))
names(df) <- colnames
} else if(allequal) { #No names, but are of the same length
df <- data.frame(matrix(unlist(x), nrow=length(x), byrow=TRUE), ...)
hasnames <- which(unlist(lapply(x, FUN=function(x) !is.null(names(x)))))
if(length(hasnames) > 0) { #We'll use the first element that has names
names(df) <- names(x[[ hasnames[1] ]])
}
} else { #No names and different lengths, we'll make our best guess here!
warning(paste("The length of vectors are not the same and do not ",
"are not named, the results may not be correct.", sep=''))
#Find the largest
lsizes <- unlist(lapply(x, length))
start <- which(lsizes == max(lsizes))[1]
df <- x[[start]]
for(i in (1:length(x))[-start]) {
y <- x[[i]]
if(length(y) < length(x[[start]])) {
y <- c(y, rep(NA, length(x[[start]]) - length(y)))
}
if(i < start) {
df <- rbind(y, df)
} else {
df <- rbind(df, y)
}
}
df <- as.data.frame(df, row.names=1:length(x))
names(df) <- paste('Col', 1:ncol(df), sep='')
}
if(missing(row.names)) {
row.names(df) <- names(x)
} else {
row.names(df) <- row.names
}
return(df)
}
# Take a look at the output from JAGS
summary(a.mobs)
my.matrix<-do.call("rbind", a.mobs)
my.data <- as.data.frame(my.matrix)
names(my.data)[1:70] <- c(paste("hospid.b.", seq(1:70), sep = ''))
names(my.data)[71:140] <- c(paste("hospid.theta.", seq(1:70), sep = ''))
#Get the quantiles of theta
quans <- c(0.0015, 0.02275, 0.5, 0.97725, 0.9985)
quantiles<-lapply(my.data[71:140], quantile, probs=quans, name=FALSE)
df.quantiles<-as.data.frame.list(quantiles) #see below for the function from https://www.r-bloggers.com/converting-a-list-to-a-data-frame/
names(df.quantiles) <- c("q0.0015","q0.02275","q0.5","q0.97725", "q0.9985")
row.names(df.quantiles) <- NULL
hospid <- read.csv("D:/TOSHIBA EXT/Statistics/MA of Biostats/WPP/hospid.csv")
hospidlabel <- read.csv("D:/TOSHIBA EXT/Statistics/MA of Biostats/WPP/hospidlabel.csv")
quants <- cbind(hospid, hospidlabel, df.quantiles)
names(quants)[1:2] <- c("hospid", "id")
#Get the means of the shrinkage factor
shrinks<-lapply(my.data[1:70], mean, name=FALSE)
df.shrinks<-as.data.frame.list(shrinks)
names(df.shrinks)<-"b"
row.names(df.shrinks) <- NULL
quants <- cbind(quants, df.shrinks)
#Get the means of theta
means<-lapply(my.data[71:140], mean, name=FALSE)
df.means<-as.data.frame.list(means)
names(df.means) <- "theta"
row.names(df.means) <- NULL
results <- cbind(collapsed[2:4], quants, df.means)
results <- results[,c(4,5,1,2,3,6:12)]
write.csv(results, "D:/TOSHIBA EXT/Statistics/MA of Biostats/WPP/wpp_poissongamma.csv", row.names = FALSE)
#Use New method the ggmcmc package#
S <- ggs(a.mobs)
hospital.theta <- data.frame(
Parameter=paste("rate[", rep(1:70), "]", sep=""),
Label=collapsed$hospid)
head(hospital.theta)
S.full <- ggs(a.mobs, par_labels=hospital.theta, family="rate")
cater <- ggs_caterpillar(D = S.full, thick_ci = c(0.02275, 0.97725), thin_ci = c(0.0015, 0.9985))
cater + labs(x = "Risk-adjusted rate (%)", y = "Hospital") +
#ggtitle("Full Bayesian shrinkage of hospital URTT rates following colorectal surgery") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_bw() +
geom_vline(xintercept = 5.2, colour = "red")
ggsave("D:/TOSHIBA EXT/Statistics/MA of Biostats/WPP/caterpillar.png", width = 6, height = 9)
#Bayesian estimates, shrunken, adjusted predictors
collapsed <- read.csv("D:/TOSHIBA EXT/Statistics/MA of Biostats/WPP/poisson_wpp2.csv",
header = TRUE,
stringsAsFactors= TRUE,
strip.white = TRUE,
na.strings=c("","NA"))
n <- length(collapsed[,1])
names(collapsed)[c(2, 4)] <- c("observe","expect")
View(collapsed)
#Funnel plot
d1<-collapsed[,2]
d2<-collapsed[,3]
d3<-collapsed[,4]
da<-collapsed[,1]
d4<-sum(d3)/sum(d2)
d6<-d4*d1/d3
d7<-sum(d6*d2)/sum(d2)
d7<-rep(d7,length(da))
p<-d7
n<-d2
#calculates lower control limits
l2<-0;l3<-0
for (I in 1:2){
if (I==1){Z<-.02275}
if (I==2){Z<-.00135}
L0<-0
for (i in 1:length(n)){
P<-p[i];N<-n[i]
X<-0
if (1-pbeta(P,X+1,N-X)>=Z){X<-0}else{
X<-P*N
A<-1
bl<-F
while (bl==F){
X<-X-A
K<-1-pbeta(P,X+1,N-X)
if (K<=Z){bl<-T}
}
A<-.001
bl<-F
while (bl==F){
X<-X+A
K<-1-pbeta(P,X+1,N-X)
if (K>=Z){bl<-T}
}
}
L0[i]<-X/n[i]
}
if (I==1){l2<-L0}
if (I==2){l3<-L0}
}
#calculates upper control limits
u2<-0;u3<-0
for (I in 1:2){
if (I==1){Z<-.02275}
if (I==2){Z<-.00135}
U0<-0
for (i in 1:length(n)){
P<-p[i];N<-n[i]
X<-N
if (pbeta(P,X,N-X+1)>=Z){X<-N}else{
X<-N*P
A<-1
bl<-F
while (bl==F){
X<-X+A
K<-pbeta(P,X,N-X+1)
if (K<Z){bl<-T}
}
A<-.001
bl<-F
while (bl==F){
X<-X-A
K<-pbeta(P,X,N-X+1)
if (K>=Z){bl<-T}
}
}
U0[i]<-X/n[i]
}
if (I==1){u2<-U0;u2[u2==0]<-1}
if (I==2){u3<-U0;u3[u3==0]<-1}
}
o<-order(d2)
u2o<-u2[o];l2o<-l2[o];d6o<-d6[o];dao<-da[o];d2o<-d2[o];d7o<-d7[o];d3o<-d3[o]; d1o<-d1[o]
u3o<-u3[o];l3o<-l3[o]
l2o[l2o<0]<-0
l3o[l3o<0]<-0
lda<-1:length(dao)
eh<-"BCCA hospitals URTT RAR"
eh<-paste(eh," funnel plot",sep="")
ej<-"Risk-adjusted Rate (%)"
eq<-paste("2 & 3 SD control limits in dashed & solid grey lines respectively.")
par(xaxs="r")
plot(d6o*100~d2o,type="p",lwd=2,col="black",ylim=c(min(c(l3o*100,d6o*100)),max(c(20,d6o*100))),xlab=eq,ylab=ej)
abline(h=d7o*100,lwd=2,col="red")
lines(u2o*100~d2o,lwd=2,lty=2,col="grey")
lines(l2o*100~d2o,lwd=2,lty=2,col="grey")
lines(u3o*100~d2o,lwd=2,lty=1,col="grey")
lines(l3o*100~d2o,lwd=2,lty=1,col="grey")
par(font=2)
oe2<-rep("",length(d6o))
for (i in 1:length(oe2)){if (d6o[i]*100>u2o[i]*100){oe2[i]<-as.character(dao[i])}}
text(d6o*100~d2o,labels=oe2,pos=3,offset=.3,cex=.8,lwd=3,col="black")
oe3<-rep("",length(d6o))
for (i in 1:length(oe3)){if (d6o[i]*100<l2o[i]*100){oe3[i]<-as.character(dao[i])}}
text(d6o*100~d2o,labels=oe3,pos=3,offset=.3,cex=.8,lwd=3,col="black")
par(font=1)
mtext("Total number of patients",side=1,line=2)
# funnel <- data.frame(dao,d2o,d1o,d3o,d6o,l3o,l2o,d7o,u2o,u3o,oe2,oe3)
# names(funnel) <- c("hospital", "patients", "observed", "expected", "standrate", "lower3", "lower2", "theta", "upper2", "upper3","outup","outlow")
# funnel <- funnel %>% mutate(outlier = paste(as.character(outup), as.character(outlow)))
#
# gg <- ggplot(funnel, aes(x=patients, y=standrate)) +
#   geom_line(data=funnel, aes(x=patients, y=lower3), colour="#AAAAAA", linetype="dotdash") +
#   geom_line(data=funnel, aes(x=patients, y=lower2), colour="#AAAAAA", linetype="dashed") +
#   geom_line(data=funnel, aes(x=patients, y=upper2), colour="#AAAAAA", linetype="dashed") +
#   geom_line(data=funnel, aes(x=patients, y=upper3), colour="#AAAAAA", linetype="dotdash") +
#   geom_point(data=subset(funnel, standrate >= lower2 & standrate <= upper2 )) +
#   geom_text(aes(x=patients, label=outlier), size=4) +
#   geom_hline(data=NULL, aes(yintercept=theta), color="red") +
#   scale_y_continuous(label=percent,limits = c(0, 0.2)) +
#   labs(x="Number of patients", y="Unplanned return to theatre rate") +
#   theme_bw()
# gg
# ggsave("D:/TOSHIBA EXT/Statistics/MA of Biostats/WPP/funnel.png", gg, width=8, height=6, dpi=150)
View(collapsed)
19/117
View(collapsed)
install.packages("mgcv")
install.packages("rjags")
install.packages("ggplot2")
install.packages("ggmcmc")
blogdown::new_site(theme = "gcushen/hugo-academic")
getwd()
D:
]
setwd("D:/Blogdown/")
blogdown::new_site(theme = "gcushen/hugo-academic")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::hugo_version()
blogdown::hugo_version()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::update_meta_addin()
blogdown::hugo_build()
blogdown::hugo_version()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::new_post_addin()
plot(cars, pch = 20)  # not really cool
blogdown:::serve_site()
blogdown::serve_site
blogdown::serve_site()
blogdown:::serve_site()
---
title: Hello BlogDown
author: ''
date: '2018-05-11'
slug: hello-blogdown
categories: []
tags: []
header:
caption: ''
image: ''
---
##Hello Blogdown
Below is an example of an R code chunk in R Markdown:
```{r cool-plot, fig.width='80%', fig.cap='A cool plot.'}
plot(cars, pch = 20)  # not really cool
```
blogdown:::serve_site()
blogdown:::serve_site()
plot(cars, pch = 20)  # not really cool
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::serve_site()
devtools::session_info()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
install.packages("blogdown")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::install_hugo()
blogdown:::serve_site()
